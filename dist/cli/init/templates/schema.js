"use strict";

Object.defineProperty(exports, "__esModule", {
   value: true
});
var schema = "\n## Schema Definition\n\n# Basic User type is defined here for convenience and some common patterns are\n# illustrated below.\n\n# @rootViewer directive associates User type with authentication system:\ntype User implements Node @rootViewer(field: \"viewer\") {\n   id: ID!                    # id field is required by Node interface\n   firstName: String\n   lastName: String\n   emails: [String]!\n   profilePictureUrl: String\n}\n\n#\n# Type Declarations\n# =================\n#\n# type Todo implements Node {\n#   id: ID!\n#   text: String\n#   complete: Boolean\n#   assignees: NodeConnection(User, todos)\n# }\n#\n# Field types can also be Float, Int, Boolean, or enum (see below)\n#\n# Connections between Nodes are declared as follows:\n#   todos: NodeConnection(Todo, assignees)\n#\n# The todos field now links to Todo type and denotes \"assignees\" as a\n# back-reference field within Todo type that points back to this type\n#\n\n# Filter Declaration\n# ==================\n#\n# filter on NodeConnection(Todo) {\n#   ACTIVE: { node: { complete: { eq: false } } }\n#   COMPLETED: { node: { complete: { eq: true } } }\n#   STATUS: (complete: Boolean) { node: { complete: { eq: $complete } } }\n#   ALL: {}\n# }\n#\n\n# Order Declaration\n# =================\n#\n# order on NodeConnection(Todo) {\n#   ID: [ { node: { id: ASCENDING }} ]\n#   TEXT: [ { node: { text: ASCENDING }} ]\n# }\n#\n\n# Mutation Declarations\n# =====================\n#\n# mutation addTodo(text: String!) {\n#   todoEdge: Edge(Todo)\n#   viewer: User\n# }\n#\n# mutation changeTodoStatus(id: ID!, complete: Boolean!) {\n#   todo: Todo\n#   viewer: User\n# }\n#\n# mutation markAllTodos(complete: Boolean!) {\n#   changedTodos: [Todo]\n#   viewer: User\n# }\n#\n# mutation removeCompletedTodos {\n#   deletedTodoIds: [ID]\n#   viewer: User\n# }\n#\n# mutation removeTodo(id: ID!) {\n#   deletedTodoId: ID\n#   viewer: User\n# }\n#\n# mutation renameTodo(id: ID!, text: String!) {\n#   todo: Todo\n# }\n#\n\n# Enum Declaration\n# ================\n#\n# enum Month { JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC }\n#\n\n# Interface Declaration\n# =====================\n#\n# interface Named {\n#   name: String!\n#   # ...other fields that types that implement interface will have to define\n# }\n#\n\n# Union Declaration\n# =================\n#\n# union AllTypes = Type1 | Type2 | Type3\n#\n\n# Input Declarations\n# ==================\n#\n# input Date {\n#   year: Int\n#   day: Int\n#   month: Month    # see enum declaration above\n# }\n#\n";
exports.schema = schema;